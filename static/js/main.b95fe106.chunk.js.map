{"version":3,"sources":["components/TodoInput.js","utils/todoHelper.js","components/TodoOptions.js","components/DeleteDialogue.js","components/EditTodoDialogue.js","components/Todo.js","components/TodoList.js","App.js","components/ChakraWrap.js","serviceWorkerRegistration.js","index.js"],"names":["TodoInput","addTodo","useState","todo","setTodo","error","setError","onSubmit","e","preventDefault","trim","length","className","value","onChange","target","placeholder","autoFocus","type","TodoHelper","setTodos","this","newTodo","title","isDone","id","Date","now","todos","allTodos","newTodos","filter","todoItem","TodoOptions","setFilter","onClick","DeleteDialogue","isOpen","onClose","handleDeleteTodo","cancelRef","React","useRef","leastDestructiveRef","isCentered","background","ref","border","cursor","color","ml","_hover","EditTodoDialogue","todoValue","editTodo","disabled","Todo","deleteTodo","resolveTodo","todoRef","useDisclosure","deleteOnOpen","onOpen","deleteIsOpen","deleteOnClose","editOnOpen","editIsOpen","editOnClose","class","checked","current","classList","add","setTimeout","TodoList","todoItems","setTodoItems","todoHelper","useEffect","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","droppableId","provided","droppableProps","innerRef","map","idx","draggableId","draggableProps","dragHandleProps","App","localStorage","savedTodos","getItem","JSON","parse","setItem","stringify","direction","justifyContent","alignItems","mt","theme","extendTheme","config","initialColorMode","useSystemColorMode","ChakraWrap","children","resetCSS","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b95fe106.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function TodoInput({ addTodo }) {\r\n  const [todo, setTodo] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (todo.trim().length === 0) {\r\n      setError(true);\r\n      return;\r\n    }\r\n\r\n    addTodo(todo);\r\n    setTodo('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className='input'>\r\n        <input\r\n          value={todo}\r\n          onChange={(e) => {\r\n            setTodo(e.target.value);\r\n            if (e.target.value.trim() !== '') setError(false);\r\n          }}\r\n          placeholder='To do ??'\r\n          autoFocus\r\n        />\r\n        <button type='submit'>\r\n          <i className='fas fa-plus'></i>\r\n        </button>\r\n      </div>\r\n      {error && <p className='error-message'>Oops! Todo cannot be blank</p>}\r\n    </form>\r\n  );\r\n}\r\n","class TodoHelper {\r\n  constructor(setTodos) {\r\n    this.setTodos = setTodos;\r\n  }\r\n\r\n  addTodo(todo) {\r\n    const newTodo = {\r\n      title: todo,\r\n      isDone: false,\r\n      id: Date.now(),\r\n    };\r\n\r\n    this.setTodos((todos) => [newTodo, ...todos]);\r\n  }\r\n\r\n  deleteTodo(allTodos, id) {\r\n    let newTodos = allTodos;\r\n    newTodos = newTodos.filter((todoItem) => todoItem.id !== id);\r\n    this.setTodos(newTodos);\r\n  }\r\n\r\n  resolveTodo(allTodos, id) {\r\n    this.setTodos(\r\n      allTodos.filter((todoItem) => {\r\n        if (todoItem.id === id) {\r\n          todoItem.isDone = !todoItem.isDone;\r\n        }\r\n        return todoItem;\r\n      })\r\n    );\r\n  }\r\n\r\n  editTodo(allTodos, id, title) {\r\n    this.setTodos(\r\n      allTodos.filter((todoItem) => {\r\n        if (todoItem.id === id) {\r\n          todoItem.title = title;\r\n        }\r\n        return todoItem;\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoHelper;\r\n","import React from 'react';\r\n\r\nexport default function TodoOptions({ setFilter, filter }) {\r\n  return (\r\n    <div className='options'>\r\n      <button\r\n        className={filter === 'all' ? 'selected-btn' : ''}\r\n        onClick={() => setFilter('all')}\r\n      >\r\n        All\r\n      </button>\r\n      <button\r\n        className={filter === 'done' ? 'selected-btn' : ''}\r\n        onClick={() => setFilter('done')}\r\n      >\r\n        Completed\r\n      </button>\r\n      <button\r\n        className={filter === 'todo' ? 'selected-btn' : ''}\r\n        onClick={() => setFilter('todo')}\r\n      >\r\n        Todo\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  Button,\r\n} from '@chakra-ui/react';\r\n\r\nexport default function DeleteDialogue({ isOpen, onClose, handleDeleteTodo }) {\r\n  const cancelRef = React.useRef();\r\n\r\n  return (\r\n    <AlertDialog\r\n      isOpen={isOpen}\r\n      leastDestructiveRef={cancelRef}\r\n      onClose={onClose}\r\n      isCentered\r\n    >\r\n      <AlertDialogOverlay>\r\n        <AlertDialogContent background='var(--primary-color)'>\r\n          <AlertDialogHeader>Delete Todo</AlertDialogHeader>\r\n\r\n          <AlertDialogBody>\r\n            Are you sure? You can't undo this action afterwards.\r\n          </AlertDialogBody>\r\n\r\n          <AlertDialogFooter>\r\n            <Button\r\n              background='var(--secondary-color)'\r\n              ref={cancelRef}\r\n              onClick={onClose}\r\n              border='none'\r\n              cursor='pointer'\r\n              color='var(--text-color)'\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              background='var(--danger-accent-color)'\r\n              ref={cancelRef}\r\n              onClick={handleDeleteTodo}\r\n              border='none'\r\n              cursor='pointer'\r\n              color='var(--secondary-color)'\r\n              ml={3}\r\n              _hover={{\r\n                background: 'var(--danger-color)',\r\n                color: 'var(--text-color)',\r\n              }}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialogOverlay>\r\n    </AlertDialog>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n} from '@chakra-ui/react';\r\n\r\nexport default function EditTodoDialogue({\r\n  isOpen,\r\n  onClose,\r\n  todoValue,\r\n  editTodo,\r\n}) {\r\n  const [todo, setTodo] = useState(todoValue);\r\n  return (\r\n    <>\r\n      <Modal isOpen={isOpen} onClose={onClose} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent background='var(--primary-color)'>\r\n          <ModalHeader>Edit Todo</ModalHeader>\r\n          <ModalCloseButton\r\n            background='var(--secondary-color)'\r\n            border='none'\r\n            cursor='pointer'\r\n            color='var(--text-color)'\r\n          />\r\n          <ModalBody>\r\n            <input\r\n              value={todo}\r\n              onChange={(e) => {\r\n                setTodo(e.target.value);\r\n              }}\r\n              placeholder='To do ??'\r\n              autoFocus\r\n              className='dialogue-input'\r\n            />\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button\r\n              background='var(--secondary-color)'\r\n              onClick={onClose}\r\n              border='none'\r\n              cursor='pointer'\r\n              color='var(--text-color)'\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              background='var(--accent-color)'\r\n              onClick={() => {\r\n                editTodo(todo);\r\n                onClose();\r\n              }}\r\n              disabled={todo.trim().length === 0}\r\n              border='none'\r\n              cursor='pointer'\r\n              color='var(--secondary-color)'\r\n              ml={3}\r\n              _hover={{\r\n                background: 'var(--accent-accent-color)',\r\n                color: 'var(--secondary-color)',\r\n              }}\r\n            >\r\n              Edit Todo\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","import { useRef } from 'react';\r\nimport { useDisclosure } from '@chakra-ui/react';\r\nimport DeleteDialogue from './DeleteDialogue';\r\nimport EditTodoDialogue from './EditTodoDialogue';\r\n\r\nexport default function Todo({ todo, deleteTodo, resolveTodo, editTodo }) {\r\n  const todoRef = useRef();\r\n\r\n  const {\r\n    onOpen: deleteOnOpen,\r\n    isOpen: deleteIsOpen,\r\n    onClose: deleteOnClose,\r\n  } = useDisclosure();\r\n  const {\r\n    onOpen: editOnOpen,\r\n    isOpen: editIsOpen,\r\n    onClose: editOnClose,\r\n  } = useDisclosure();\r\n\r\n  const handleDeleteTodo = () => {\r\n    deleteOnClose();\r\n    todoRef.current.classList.add('fall'); // fall animation\r\n    setTimeout(() => {\r\n      // fall animation needs at least 1 sec\r\n      deleteTodo();\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`todo ${todo.isDone ? 'todo-fill' : ''}`} ref={todoRef}>\r\n        <div className='todo-content'>\r\n          {todo.isDone && (\r\n            <div onClick={resolveTodo} className='checked-btn'>\r\n              <i class='fas fa-check'></i>\r\n            </div>\r\n          )}\r\n          {!todo.isDone && (\r\n            <input\r\n              onChange={() => resolveTodo()}\r\n              className='checkbox'\r\n              type='checkbox'\r\n              checked={todo.isDone}\r\n            />\r\n          )}\r\n          <p className={todo.isDone ? 'completed-task' : ''}>{todo.title}</p>\r\n        </div>\r\n        <div>\r\n          <button className='todo-delete' onClick={deleteOnOpen}>\r\n            <i className='far fa-trash-alt'></i>\r\n          </button>\r\n          <button className='todo-edit' onClick={editOnOpen}>\r\n            <i className='far fa-edit'></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* feedbacks */}\r\n      <DeleteDialogue\r\n        isOpen={deleteIsOpen}\r\n        onClose={deleteOnClose}\r\n        handleDeleteTodo={handleDeleteTodo}\r\n      />\r\n      <EditTodoDialogue\r\n        isOpen={editIsOpen}\r\n        onClose={editOnClose}\r\n        editTodo={editTodo}\r\n        todoValue={todo.title}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport Todo from './Todo';\r\n\r\nexport default function TodoList({\r\n  todoItems,\r\n  setTodoItems,\r\n  todoHelper,\r\n  filter,\r\n}) {\r\n  const [todos, setTodos] = useState(todoItems || []);\r\n\r\n  useEffect(() => {\r\n    setTodos(todoItems);\r\n  }, [todoItems]);\r\n\r\n  const handleOnDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n    const items = Array.from(todos);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    setTodos(items);\r\n    setTodoItems(items);\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n      <Droppable droppableId='todos'>\r\n        {(provided) => (\r\n          <ul {...provided.droppableProps} ref={provided.innerRef}>\r\n            {todos !== '' &&\r\n              todos.map((todo, idx) => {\r\n                if (filter === 'done' && !todo.isDone) return null;\r\n                if (filter === 'todo' && todo.isDone) return null;\r\n                return (\r\n                  <Draggable key={idx} draggableId={`item-${idx}`} index={idx}>\r\n                    {(provided) => (\r\n                      <li\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                      >\r\n                        <Todo\r\n                          todo={todo}\r\n                          key={todo.id}\r\n                          deleteTodo={() =>\r\n                            todoHelper.deleteTodo(todos, todo.id)\r\n                          }\r\n                          resolveTodo={() =>\r\n                            todoHelper.resolveTodo(todos, todo.id)\r\n                          }\r\n                          editTodo={(title) =>\r\n                            todoHelper.editTodo(todos, todo.id, title)\r\n                          }\r\n                        />\r\n                      </li>\r\n                    )}\r\n                  </Draggable>\r\n                );\r\n              })}\r\n            {provided.placeholder}\r\n          </ul>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n}\r\n","import './App.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { Flex } from '@chakra-ui/react';\r\nimport TodoInput from './components/TodoInput';\r\nimport TodoHelper from './utils/todoHelper';\r\nimport TodoOptions from './components/TodoOptions';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState('');\r\n  const [filter, setFilter] = useState('all');\r\n\r\n  const todoHelper = new TodoHelper(setTodos);\r\n\r\n  useEffect(() => {\r\n    if (!localStorage) return;\r\n\r\n    if (todos === '') {\r\n      let savedTodos = localStorage.getItem('todos');\r\n      if (savedTodos && savedTodos.length !== 0) {\r\n        setTodos(JSON.parse(savedTodos));\r\n      }\r\n    } else {\r\n      localStorage.setItem('todos', JSON.stringify(todos));\r\n    }\r\n  }, [todos]);\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Flex\r\n        direction='column'\r\n        justifyContent='center'\r\n        alignItems='center'\r\n        mt={20}\r\n      >\r\n        <h1>Todo App</h1>\r\n        <TodoInput addTodo={(todo) => todoHelper.addTodo(todo)} />\r\n        <TodoOptions filter={filter} setFilter={setFilter} />\r\n        <TodoList\r\n          todoItems={todos}\r\n          setTodoItems={setTodos}\r\n          filter={filter}\r\n          todoHelper={todoHelper}\r\n        />\r\n      </Flex>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ChakraProvider, extendTheme } from '@chakra-ui/react';\r\n\r\nconst theme = extendTheme({\r\n  config: {\r\n    initialColorMode: 'dark',\r\n    useSystemColorMode: false,\r\n  },\r\n});\r\n\r\nexport default function ChakraWrap({ children }) {\r\n  return (\r\n    <ChakraProvider theme={theme} resetCSS={false}>\r\n      {children}\r\n    </ChakraProvider>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport ChakraWrap from './components/ChakraWrap';\r\n\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraWrap>\r\n      <App />\r\n    </ChakraWrap>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}